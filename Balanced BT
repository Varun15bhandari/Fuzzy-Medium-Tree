/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int data;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int val) { data = val; left = null, right = null }
 * }
 **/

class Solution {
    public int getHeight(TreeNode node){
        if(node==null)return 0;
        int l=getHeight(node.left);
        int r=getHeight(node.right);
        return 1+Math.max(l,r);
    }
    public boolean isBalanced(TreeNode root) {
        //your code goes here
        if(root==null)return true;
        int left=getHeight(root.left);
        int right=getHeight(root.right);
        if(Math.abs(left-right)<=1 &&
        isBalanced(root.left) && isBalanced(root.right)){
            return true;
        }
        return false;
	}
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int data;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int val) { data = val; left = null, right = null }
 * }
 **/

class Solution {
    public int helper(TreeNode root){
        if(root==null)return 0;
        int left=helper(root.left);
        if(left==-1)return -1;
        int right=helper(root.right);
        if(right==-1)return -1;
        if(Math.abs(left-right)>1)return -1;
        return Math.max(left,right)+1;
    }
    public boolean isBalanced(TreeNode root) {
        //your code goes here
      return helper(root)!= -1;
	}
}
